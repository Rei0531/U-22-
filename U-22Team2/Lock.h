#pragma once
#include "DxLib.h"
#include "Color.h"

struct LockALL {		//ノブも含めた鍵穴に必要な変数
public:
	//右の[]がステージ数、左の[]がノブ、鍵穴の数
	int color[30][4]{		//ノブと鍵の穴		//0：ノブ　１〜鍵穴

		{BLUE},							//ステージ1
		{LIGHTBLUE,BLUE, RED},			//ステージ2
		{BLUE,YELLOW,PURPLE},			//ステージ3
		{RED},							//ステージ4
		{LIGHTBLUE},					//ステージ5
		{RED},							//ステージ6
		{YELLOW,BLUE,RED},				//ステージ7
		{RED,GREEN},					//ステージ8
		{RED,GREEN},					//ステージ9
		{RED},						//ステージ10のドアのローテーションの順番
		{RED},						//ステージ11のドアのローテーションの順番
		{RED},						//ステージ12のドアのローテーションの順番
		{RED},						//ステージ13のドアのローテーションの順番
		{RED},						//ステージ14のドアのローテーションの順番
		{RED},						//ステージ15のドアのローテーションの順番
		{RED},						//ステージ16のドアのローテーションの順番
		{RED},						//ステージ17のドアのローテーションの順番
		{RED},						//ステージ18のドアのローテーションの順番
		{RED},						//ステージ19のドアのローテーションの順番
		{RED},						//ステージ20のドアのローテーションの順番
		{RED},						//ステージ21のドアのローテーションの順番
		{RED},						//ステージ22のドアのローテーションの順番
		{RED},						//ステージ23のドアのローテーションの順番
		{RED},						//ステージ24のドアのローテーションの順番
		{RED},						//ステージ25のドアのローテーションの順番
		{RED},						//ステージ26のドアのローテーションの順番
		{RED},						//ステージ27のドアのローテーションの順番
		{RED},						//ステージ28のドアのローテーションの順番
		{RED},						//ステージ29のドアのローテーションの順番
		{RED}						//ステージ30のドアのローテーションの順番

	};
	int colorback[30][4]{		//鍵穴のバックアップバックアップ

		{BLUE},							//ステージ1
		{LIGHTBLUE,BLUE, RED},			//ステージ2
		{BLUE,YELLOW,PURPLE},			//ステージ3
		{RED},							//ステージ4
		{LIGHTBLUE},					//ステージ5
		{RED},							//ステージ6
		{YELLOW,BLUE,RED},				//ステージ7
		{RED,GREEN},					//ステージ8
		{RED,GREEN},					//ステージ9
		{RED},						//ステージ10のドアのローテーションの順番
		{RED},						//ステージ11のドアのローテーションの順番
		{RED},						//ステージ12のドアのローテーションの順番
		{RED},						//ステージ13のドアのローテーションの順番
		{RED},						//ステージ14のドアのローテーションの順番
		{RED},						//ステージ15のドアのローテーションの順番
		{RED},						//ステージ16のドアのローテーションの順番
		{RED},						//ステージ17のドアのローテーションの順番
		{RED},						//ステージ18のドアのローテーションの順番
		{RED},						//ステージ19のドアのローテーションの順番
		{RED},						//ステージ20のドアのローテーションの順番
		{RED},						//ステージ21のドアのローテーションの順番
		{RED},						//ステージ22のドアのローテーションの順番
		{RED},						//ステージ23のドアのローテーションの順番
		{RED},						//ステージ24のドアのローテーションの順番
		{RED},						//ステージ25のドアのローテーションの順番
		{RED},						//ステージ26のドアのローテーションの順番
		{RED},						//ステージ27のドアのローテーションの順番
		{RED},						//ステージ28のドアのローテーションの順番
		{RED},						//ステージ29のドアのローテーションの順番
		{RED}						//ステージ30のドアのローテーションの順番
	};
	//ステージ数/ノブ、鍵穴の合計
	//	　↓	↓
	int n[30]{ 1,3,3,1,1,1,3,2,2 ,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };	//ノブと鍵穴の数	//ステージ数と、ノブ、鍵穴の合計数を上の数に合わせる
	int Release = 0; //鍵穴の解除数

	bool
		clearflg = FALSE;

};

int Lock(void);
int UnLock(void);
int Goal(void);